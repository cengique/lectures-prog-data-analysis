[{"content":"Welcome! Select a section from the menu on the left.\n","date":1508426775,"description":"Home page","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://cengique.github.io/lectures-prog-data-analysis/","publishdate":"2018-11-23T15:26:15Z","title":"Home"},{"content":"This site contains a collection of lectures, assignments, and instructor materials for teaching software engineering or development, at an intermediate level. It is assumed that students already know basic software engineering terms and skills.\nMaterials are used for the ITEC 3870 Software Development II course taught at Georgia Gwinnett College . They were developed by Cengiz Gunay and Anca Doloc-Mihu , supported by an Affordable Learning Georgia grant in 2019-2020.\nSome materials are courtesy of Joan Smith, Eugene Agichstein, and the Internets. Slides are offered with the license: CC BY-SA 4.0 .\nTo modify and use these materials in your classes, fork the Github repository or use the edit link at the bottom right of each page.\n","date":1508426775,"description":"About this Site","lastmod":"2019-10-26T15:26:15Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://cengique.github.io/lectures-prog-data-analysis/about/","publishdate":"2018-11-23T15:26:15Z","title":"About this Site"},{"content":"Data input/output and cleaning ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Working with vector data, Next - Data plotting, wrangling, and aggregation Data formats See Python for Data Analysis, Chapter 6 and 7 Some topics:\nLoading and saving in different data formats Common options for loading Handling exceptions in formatting Selecting index columns Reading from URLs Reading from databases Binary formats (e.g., HDF5) Data cleaning Missing data with N/A, NaN, and NULL values Filtering missing data out Filling in missing data values Eliminating duplicates Replacing values Adding new calculated columns Cosmetics (axis labels, etc) Discretization Outliers Random sampling and shuffling String manipulation and regular expressions ","date":-62135596800,"description":"","objectID":"3b5cb6208fee9a3363a262b70b0bc79b","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-data-io-cleaning/","title":"Data input/output and cleaning"},{"content":"Data structures and performance ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Recursion, Next - Working with vector data Time complexity, big-O notation General idea: time it takes for an algorithm to run. Complexity: the number of steps involved in a process or pieces that make up a system ? Complexity makes a difference in everyday use:\nFast and high quality services vs those that lag, crash, and are unreliable\nBig-O is calculated based on input size In data analytics, we will often work with large amounts of data Performance of algorithms matter more with large data Does this algorithm scale up when it is given a large input?\nTherefore, $O()$ notation indicates growth of time with an input, n Definitions: Big-O notation $O(1)$: constant time, independent of input size, $n$ (e.g. getting an item from an array with an index) $O(\\log(n))$: less than linear, exponent of $n$\u0026amp;rsquo;s growth (e.g., binary tree search; $log_2(4)=2$, $log_2(16)=4$) $O(\\sqrt{n})$: more than log, less than $n$ (e.g., process one row of matrix data) $O(n)$: linear time with size (e.g. summation of every element in list) $O(n^k)$: polynomial time ($k$: constant) (e.g., nested loops over whole input) $O(2^n)$: exponential time (worst case; e.g., finding best route between two points) TODO: add graph\nCommon algorithms Index lookup: $O(1)$ Hash lookup: $O(1)$ (in Python: dict and sets) Binary search: $O(\\log_2 n)$ Search in array: $O(n)$ Find prime numbers: $O(\\sqrt{n})$ Nested loops: $O(n^k)$ Find diFFeRent cAPiTAlizations of words: $O(2^n)$ Fork \u0026amp;amp; practice! Share REPL to work together with teammates. Submit team fork link once on Piazza.\nBitwise operators Can you solve word capitalizations using binary numbers?\nTake advantage of binary representation of computers!\nBitwise operators in Python :\nx \u0026amp;amp; 4 # will be non-zero only if x has 3rd bit on x | 15 # will turn on lower 4 bits x \u0026amp;gt;\u0026amp;gt; 4 # shift x by 4 bits to the right (faster than …","date":-62135596800,"description":"","objectID":"f7294d35a7c4e33aa3b0e36eb25af691","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-data-structures/","title":"Data structures and performance"},{"content":"Data plotting, wrangling, and aggregation ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Data input/output and cleaning, Next - Instructor Materials Data plotting See Python for Data Analysis, Chapter 9 Main library is matplotlib:\nControls how figures are laid out and decorated (axes, labels, colors, line styles, etc) Can be used directly Pandas uses it indirectly, but allows using matplotlib commands Anatomy of a plot in matplotlib figure: The graphical area for one figure axis: Labeled axis for XY, can be superimposed or tiled plot: Individual shapes (lines, rectangles, etc) drawn on an axis Types of Plots line and scatter graphs bar graphs and distributions (histogram vs density) other statistics (boxplots) image plots (matplotlib commands ) surface plots (matplotlib commands ) (see plotting in pandas using matplotlib )\nData wrangling See Python for Data Analysis, Chapter 8 Hierarchical indexing: partial indexing unstack() method converts to DataFrame stack() is the reverse swaplevel() for reordering hierarchical indices sort_index() for sorting by one index Summary statistics with vector operators, such as sum(level=, axis=) Combining and merging merge() by using keys (indices) like the SQL join operator inner, left, right, and outer joins possible concat() for stacking objects Reshape and pivot stack/ vs unstack reshape \u0026amp;ldquo;long\u0026amp;rdquo; vs \u0026amp;ldquo;wide\u0026amp;rdquo; format pivot vs melt Data aggregation See Python for Data Analysis, Chapter 10 Groupby: split-apply-combine selecting column(s) and index levels aggregation functions apply() arbitrary functions Pivot tables and cross-tabulation pivot_table crosstab ","date":-62135596800,"description":"","objectID":"253f53c0c187e7b92ee3e1a91b66272c","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-data-wrangle-aggregate/","title":"Data plotting, wrangling, and aggregation"},{"content":"Errors and Exceptions ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Object Oriented Programming, Next - Recursion What are exceptions? A way to break out of the linear execution of a program Usually for an exceptional situation (e.g., an error) Otherwise, it may cause your program to crash Why not instead use if statements to catch errors? Cleaner logic and execution, does not disrupt logic Exception may arise from multiple places Examples with if statements vs exceptions If statement:\nvalue = count_inputs(...) if value \u0026amp;lt; -1: print(\u0026amp;#34;Error in counting inputs!\u0026amp;#34;) exit -1 # now do stuff with value ... Exception:\ntry: value = count_inputs(...) # now do stuff with value ... except: print(\u0026amp;#34;Error in counting inputs!\u0026amp;#34;) raise Exceptions in Python All exceptions should be subclasses of BaseException Other options and examples below and in official Python docs import sys try: f = open(\u0026amp;#39;myfile.txt\u0026amp;#39;) s = f.readline() i = int(s.strip()) except OSError as err: print(\u0026amp;#34;OS error: {0}\u0026amp;#34;.format(err)) except ValueError: print(\u0026amp;#34;Could not convert data to an integer.\u0026amp;#34;) except: print(\u0026amp;#34;Unexpected error:\u0026amp;#34;, sys.exc_info()[0]) raise else: print(\u0026amp;#34;OMG no errors!\u0026amp;#34;) finally: print(\u0026amp;#34;Error or not, I say this.\u0026amp;#34;) Exercise time Individually or in teams, implement ONE of these by using exceptions:\ndefaultdict functionality by using the regular dict Implement input validation (only numbers) with loops Create a file if not already exists Attach runtime output screenshots showing valid and exception cases on submission site.\n","date":-62135596800,"description":"","objectID":"5ba8d467aad3a8fe2592ffa1a254146b","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-exceptions/","title":"Errors and Exceptions"},{"content":"Introduction ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Schedule, Next - Python basics refresher Welcome Python course with a focus on data analysis modules:\nFirst half of semester, start from scratch and learn basic Python Second half, focus on modules numpy, pandas, and matplotlib Prereqs: Only need programming knowledge, no need to know Python in advance!\nMeet your instructor Instructor: Dr. Cengiz Gunay Email: cgunay@ggc.edu Office: Virtual and W-2215 (by appointment )\nPhone: 678-951-9621 (also GroupMe)\nAbout the instructor: Dr Cengiz Gunay Went to computer science grad school on artificial intelligence neural networks Then, worked as post-doctoral fellow at Emory Univ. on simulating models of biological neurons and large-scale biological data mining (e.g., SQL, neural nets, genetic algos) Started teaching as visiting Faculty teaching at Emory Univ., Math \u0026amp;amp; CS Dept. At GGC, became IT faculty with Soft Dev focus and helped start a Data Science and Analytics major Your turn! Quickly introduce yourself now in class!\nName Major/Year What do you aim to achieve by taking this course Something fun about yourself Semester plan See Schedule .\nSyllabus and hands on work Let\u0026amp;rsquo;s look through the syllabus Message in a bottle from past students Time to work on:\nSkills Survey on D2L Register for Discord and Piazza Respond to the “Introductions” discussion topic ","date":-62135596800,"description":"","objectID":"b9dff6dd63ef024542b989cac29aa30c","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-intro/","title":"Introduction"},{"content":"Object Oriented Programming ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Python basics refresher, Next - Errors and Exceptions What is object oriented programming? Analogy to way we interact with objects in real world A component-oriented approach Promotes reusability OOP: encapsulation and data abstraction Two of the fundamental pillars of OOP Data and functions (methods) go together Unimportant details of code are hidden OOP in Python Module 3 from Python Essentials 2 (old resource: HyperSkill )\nConstructors Class attributes Instance attributes Calling class methods Magic methods Class activity: make your own class! Teams of 2, pick a marker Write code on a board that includes: A class with a constructor One or more method functions Make sure to have some class attributes that serve a purpose Also have instance attributes Create several instances of the class and call its methods to demonstrate Class activity: now make it on Repl.it No teamwork; create a file with your name and put your class in your own fork, by changing example below (not just strings!): Inheritance and Polymorphism The last two fundamental pillars of OOP Inheritance: subclasses inherit methods and attributes Polymorphism: all subclasses can be used interchangably, regardless of implementation details Class activity: polymorphism Teams of 2, pick a marker Write code on a board that includes: A parent class and 2-3 child classes Create parent class method to be overloaded in the children Implement different versions of method in child classes Use super() at least once Demonstrate calling the method in children object instances to show different outcomes Must have a meaning! Class activity: inherit! Work individually, fork it and follow instructions:\n","date":-62135596800,"description":"","objectID":"a0ced4e712d9229a2b61d92ae111d423","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-object-oriented/","title":"Object Oriented Programming"},{"content":"Python basics refresher ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Introduction, Next - Object Oriented Programming The very basics Chapter 2.3\nPython history: version 2 vs 3; now popular for AI \u0026amp;amp; ML Whitespace, quotations, language conventions, operators Control statements: blocks, if-elif-else, while Modules and import An ephemeral Python practice area (wait for it to load)\nHow to practice Python Do one or more of these based on your preferences!\nUse online IDEs (Brython Editor - no ads, can get share link) Download from Pyton.org Download IDE PyCharm (student discount ) Download IDE Visual Studio Code with Python plugin Download Jupyter (we\u0026amp;rsquo;ll use it in second half of semester) A crash course into Python See Chapter 2.\nZen of Python Installing Virtual environments Whitespace Modules and import Functions Strings Practice functions Copy the code below into your own Python IDE. Work in teams, one person can host the code and others can contribute:\nInstructions:\nList everyone\u0026amp;rsquo;s names at the top in a comment. Add a new function that prints out a salutation message Then create a list and a for loop that prints out each element. Add some logic with an if-statement to behave differently for some elements of the list. Add two more functions around a theme of your choice and make sure to use:\ndocstrings: show usage f-strings: print or return lambda functions: show a use example default function parameters: show usage for provided vs missing parameters Make it interesting!\nLanguage basics (Continuing DSS Chapter 2)\nLists Tuples Dictionaries (default, Counter) Practice basics in-class exercise Work in teams on any IDE, create a program with a theme of your choice that uses:\ninput from a user in a loop a dictionary to store a list of items and their associated values check if items exist in the dictionary and In addition, make sure your program includes the following:\nA function that returns multiple values …","date":-62135596800,"description":"","objectID":"a5e72d15968c716c0792abbc65428b3a","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-python-basics/","title":"Python basics refresher"},{"content":" Recursion ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Errors and Exceptions, Next - Data structures and performance (click to read more) What is recursion Reusing a function Calling itself Similar to a loop But not linear, instead it could be exponential Why recursion What is the advantage over loops?\nDivide-and-conquer type problems Tree search Sorting Elegant solution Limitations?\nLess efficient Can exhaust program stack \u0026amp;lt;div style=\u0026amp;quot;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\u0026amp;quot;\u0026amp;gt; \u0026amp;lt;iframe allow=\u0026amp;quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\u0026amp;quot; allowfullscreen=\u0026amp;quot;allowfullscreen\u0026amp;quot; loading=\u0026amp;quot;eager\u0026amp;quot; referrerpolicy=\u0026amp;quot;strict-origin-when-cross-origin\u0026amp;quot; src=\u0026amp;quot;https://www.youtube.com/embed/Qk0zUZW-U_M?autoplay=0\u0026amp;amp;controls=1\u0026amp;amp;end=0\u0026amp;amp;loop=0\u0026amp;amp;mute=0\u0026amp;amp;start=0\u0026amp;quot; style=\u0026amp;quot;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\u0026amp;quot; title=\u0026amp;quot;YouTube video\u0026amp;quot; \u0026amp;gt;\u0026amp;lt;/iframe\u0026amp;gt; \u0026amp;lt;/div\u0026amp;gt; Designing a recursive algorithm Do you have a nesting doll situation? Identify the part in your problem that repeats and when that happens. Identify when the recursion ends. What is the condition that stops it? Example: Factorial $$f(n)=n!$$ $$f(n)=n\\times{}(n-1)\\times\\cdots\\times{}2\\times{}1$$\nWhat is the repeating part versus the termination condition?\nRepeating pattern: each time multiply with one less number $$f(n)=n\\times f(n-1)$$ Termination condition: we stop at 1 $$f(1)=1$$ Classic example: factorial For demo purposes only, not today\u0026amp;rsquo;s class activity.\nTrees A binary tree :\na b c Always true in sorted binary tree (or binary search tree - BST) : $a\u0026amp;lt;b\u0026amp;lt;c$\nNot a linear data structure, b is root node, b.left=a and b.right=c\nclass Node: def __init__(self, info): self.info = info self.left = None self.right = None Traversing trees without recursion Can …","date":-62135596800,"description":"","objectID":"6dabfd26e80dbc9bfd094c68bedc05f1","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-recursion/","title":"Recursion"},{"content":" Working with vector data ITEC 3160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Data structures and performance, Next - Data input/output and cleaning Jupyter notebooks in Python How to use Jupyter? Jupyter is included in the Anaconda distribution Start Anaconda from menu or run anaconda-navigator on command line Install the Jupyter Notebook application in Anaconda If it\u0026amp;rsquo;s already installed, click on Launch to start it JupyterLab provides an integrated environment, similar to R Studio or Matlab Without installing, online notebooks are available at Google Colab , DeepNote , and Azure Notebooks Try notebooks in your browser: Live intro notebook Block execution Follow sections on the official Notebook Examples tutorial:\nStructure of notebook documents Kernels, cell types: markdown vs code Navigation, running code Order of execution Practice! Open a Jupyter notebook and follow along Do ONE of the following:\nOpen online notebook at Google Colab , DeepNote , or Azure Notebooks Or download Anaconda and run Jupyter Notebook or JupyterLab Python\u0026amp;rsquo;s Numpy module From Python for Data Analysis, 2nd Ed, chapter 4 :\nenables working with $n$-dimensional arrays math functions without needing to loop over arrays reading/writing to files advanced math: linear algebra, random numbers, etc How do dimensions work? 1 dimension: 1 bracket, 1 index\narr1d = np.array([1, 2, 3]) arr1d[x] 2 dimensions: 2 brackets, 2 indices\narr2d = np.array([[1, 2, 3], [4, 5, 6]]) arr2d[x, y] 3 dimensions: \u0026amp;hellip;\narr3d = np.array([[[ 1, 2, 3], [ 4, 5, 6]], [[ 7, 8, 9], [10, 11, 12]]]) arr3d[x, y, z] Numpy overview Creating and manipulating ndarray objects and doing math on them Data types for efficient storage and use Indexing and slicing; with boolean expressions and fancy indexing Unary and binary math functions Numpy practice Start by working in teams on the whiteboard and then submit individually by forking this or create an online notebook.\nOption 1 Solve …","date":-62135596800,"description":"","objectID":"b025890888f63e4308145cbbc5a30a4f","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-vectors/","title":"Working with vector data"},{"content":"Select a chapter from the menu.\n","date":1603121175,"description":"Instructor Materials. Email authors for hidden materials like quizzes and their keys.","lastmod":"2020-12-20T15:26:15Z","objectID":"9e6a1416d4bf7d2fcfc2765ce90e972f","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/","publishdate":"2019-11-23T15:26:15Z","title":"Instructor Materials"},{"content":"This section includes all the small assignments for the course.\nTBA\n","date":1603121175,"description":"Assignments","lastmod":"2020-12-20T15:26:15Z","objectID":"a94b5e3a08c53965757cf6617c2bd9f4","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/assignments/","publishdate":"2019-11-23T15:26:15Z","title":"Assignments"},{"content":"TBA\n","date":1603121175,"description":"Exams","lastmod":"2020-12-20T15:26:15Z","objectID":"326e4c3e83433151edcdc7fadb35e00d","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/exams/","publishdate":"2019-11-23T15:26:15Z","title":"Exams"},{"content":" Week#DateModuleSetupTopicHands-onAssignment ","date":1611588375,"description":"Schedule","lastmod":"2021-01-25T15:26:15Z","objectID":"450c1bfd912a1a4193a1e9d8eba5932a","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/schedule/","publishdate":"2020-12-20T15:26:15Z","title":"Schedule with setup"},{"content":"Syllabus Example Syllabus which includes learning outcomes, textbook, schedule and details about the course organization.\nParts that instructor needs to change to his/her own data are emphasized in yellow.\n","date":1603121175,"description":"Syllabus","lastmod":"2020-12-20T15:26:15Z","objectID":"2dbf0565756b6df943a700c93c819e80","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/syllabus/","publishdate":"2019-11-23T15:26:15Z","title":"Syllabus"},{"content":" Week#DateModuleTopicHands-onAssignment ","date":1611588375,"description":"Schedule","lastmod":"2021-01-25T15:26:15Z","objectID":"b551dedd1c4e75ac43bdd549448b7dab","permalink":"https://cengique.github.io/lectures-prog-data-analysis/schedule/","publishdate":"2020-12-20T15:26:15Z","title":"Schedule"}]