[{"content":"Welcome! We are still adding materials. Select a chapter from the menu on the left.\n","date":1508426775,"description":"Home page","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://cengique.github.io/lectures-prog-data-analysis/","publishdate":"2018-11-23T15:26:15Z","title":"Home"},{"content":"This site contains a collection of lectures, assignments, and instructor materials for teaching software engineering or development, at an intermediate level. It is assumed that students already know basic software engineering terms and skills.\nMaterials are used for the ITEC 3870 Software Development II course taught at Georgia Gwinnett College . They were developed by Cengiz Gunay and Anca Doloc-Mihu , supported by an Affordable Learning Georgia grant in 2019-2020.\nSome materials are courtesy of Joan Smith, Eugene Agichstein, and the Internets. Slides are offered with the license: CC BY-SA 4.0 .\nTo modify and use these materials in your classes, fork the Github repository or use the edit link at the bottom right of each page.\n","date":1508426775,"description":"About this Site","lastmod":"2019-10-26T15:26:15Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://cengique.github.io/lectures-prog-data-analysis/about/","publishdate":"2018-11-23T15:26:15Z","title":"About this Site"},{"content":"Data input/output and cleaning ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Working with vector data, Next - Data wrangling and aggregation Data formats See Python for Data Analysis, Chapter 6 and 7 Some topics:\nLoading and saving in different data formats Common options for loading Handling exceptions in formatting Selecting index columns Reading from URLs Reading from databases Binary formats (e.g., HDF5) Data cleaning Missing data with N/A, NaN, and NULL values Filtering missing data out Filling in missing data values Eliminating duplicates Replacing values Adding new calculated columns Cosmetics (axis labels, etc) Discretization Outliers Random sampling and shuffling String manipulation and regular expressions ","date":-62135596800,"description":"","objectID":"3b5cb6208fee9a3363a262b70b0bc79b","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-data-io-cleaning/","title":"Data input/output and cleaning"},{"content":"Data structures and performance ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Python basics refresher, Next - Errors and Exceptions Time complexity, big-O notation General idea: time it takes for an algorithm to run. Complexity: the number of steps involved in a process or pieces that make up a system ? Complexity makes a difference in everyday use:\nFast and high quality services vs those that lag, crash, and are unreliable\nBig-O is calculated based on input size In data analytics, we will often work with large amounts of data Performance of algorithms matter more with large data Does this algorithm scale up when it is given a large input?\nTherefore, $O()$ notation indicates growth of time with an input, n Definitions: Big-O notation $O(1)$: constant time, independent of input size, $n$ (e.g. getting an item from an array with an index) $O(\\log(n))$: less than linear, exponent of $n$\u0026amp;rsquo;s growth (e.g., binary tree search; $log_2(4)=2$, $log_2(16)=4$) $O(\\sqrt{n})$: more than log, less than $n$ (e.g., process one row of matrix data) $O(n)$: linear time with size (e.g. summation of every element in list) $O(n^k)$: polynomial time ($k$: constant) (e.g., nested loops over whole input) $O(2^n)$: exponential time (worst case; e.g., finding best route between two points) TODO: add graph\nCommon algorithms Index lookup: $O(1)$ Hash lookup: $O(1)$ (in Python: dict and sets) Binary search: $O(\\log_2 n)$ Search in array: $O(n)$ Find prime numbers: $O(\\sqrt{n})$ Nested loops: $O(n^k)$ Find diFFeRent cAPiTAlizations of words: $O(2^n)$ Fork \u0026amp;amp; practice! Share REPL to work together with teammates. Submit team fork link once on Piazza.\nBitwise operators Can you solve word capitalizations using binary numbers?\nTake advantage of binary representation of computers!\nBitwise operators in Python :\nx \u0026amp;amp; 4 # will be non-zero only if x has 3rd bit on x | 15 # will turn on lower 4 bits x \u0026amp;gt;\u0026amp;gt; 4 # shift x by 4 bits to the right …","date":-62135596800,"description":"","objectID":"f7294d35a7c4e33aa3b0e36eb25af691","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-data-structures/","title":"Data structures and performance"},{"content":"Data wrangling and aggregation ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Data input/output and cleaning, Next - Instructor Materials Data wrangling See Python for Data Analysis, Chapter 8 Hierarchical indexing: partial indexing unstack() method converts to DataFrame stack() is the reverse swaplevel() for reordering hierarchical indices sort_index() for sorting by one index Summary statistics with vector operators, such as sum(level=, axis=) Combining and merging merge() by using keys (indices) like the SQL join operator inner, left, right, and outer joins possible concat() for stacking objects Reshape and pivot stack/ vs unstack reshape pivot vs melt Data cleaning Missing data with N/A, NaN, and NULL values Filtering missing data out Filling in missing data values Eliminating duplicates Replacing values Adding new calculated columns Cosmetics (axis labels, etc) Discretization Outliers Random sampling and shuffling String manipulation and regular expressions ","date":-62135596800,"description":"","objectID":"253f53c0c187e7b92ee3e1a91b66272c","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-data-wrangle-aggregate/","title":"Data wrangling and aggregation"},{"content":"Errors and Exceptions ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Data structures and performance, Next - Recursion What are exceptions? A way to break out of the linear execution of a program Usually for an exceptional situation (e.g., an error) Otherwise, it may cause your program to crash Why not instead use if statements to catch errors? Cleaner logic and execution, does not disrupt logic Exception may arise from multiple places Examples with if statements vs exceptions If statement:\nvalue = count_inputs(...) if value \u0026amp;lt; -1: print(\u0026amp;#34;Error in counting inputs!\u0026amp;#34;) exit -1 # now do stuff with value ... Exception:\ntry: value = count_inputs(...) # now do stuff with value ... except: print(\u0026amp;#34;Error in counting inputs!\u0026amp;#34;) raise Exceptions in Python All exceptions should be subclasses of BaseException Other options and examples below and in official Python docs import sys try: f = open(\u0026amp;#39;myfile.txt\u0026amp;#39;) s = f.readline() i = int(s.strip()) except OSError as err: print(\u0026amp;#34;OS error: {0}\u0026amp;#34;.format(err)) except ValueError: print(\u0026amp;#34;Could not convert data to an integer.\u0026amp;#34;) except: print(\u0026amp;#34;Unexpected error:\u0026amp;#34;, sys.exc_info()[0]) raise else: print(\u0026amp;#34;OMG no errors!\u0026amp;#34;) finally: print(\u0026amp;#34;Error or not, I say this.\u0026amp;#34;) Exercise time Team up and implement ONE of these by using exceptions:\ndefaultdict functionality by using the regular dict Implement input validation (only numbers) with loops Create a file if not already exists ","date":-62135596800,"description":"","objectID":"5ba8d467aad3a8fe2592ffa1a254146b","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-exceptions/","title":"Errors and Exceptions"},{"content":"Introduction ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Schedule, Next - Python basics refresher Welcome Meet your instructor Instructor: Dr. Cengiz Gunay Soft-Eng-Practicum Github Organization Email: cgunay@ggc.edu Office: Virtual and W-2117 (by appointment )\nPhone: 678-951-9621 (also GroupMe)\nAbout the instructor: Dr Cengiz Gunay Went to computer science grad school on artificial intelligence neural networks Then, worked as post-doctoral fellow at Emory Univ. on simulating models of biological neurons and large-scale biological data mining (e.g., SQL, neural nets, genetic algos) Started teaching as visiting Faculty teaching at Emory Univ., Math \u0026amp;amp; CS Dept. At GGC, became IT faculty with Soft Dev focus and helped start a Data Science and Analytics major Your turn! Quickly introduce yourself now in class!\nName Major/Year What do you aim to achieve by taking this course Something fun about yourself Semester plan See Schedule .\nSyllabus and hands on work Let\u0026amp;rsquo;s look through the syllabus Time to work on:\nSkills Survey on D2L Register for Discord and Piazza Respond to the “Introductions” discussion topic; create an inline resume ","date":-62135596800,"description":"","objectID":"b9dff6dd63ef024542b989cac29aa30c","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-intro/","title":"Introduction"},{"content":"Object Oriented Programming ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Recursion, Next - Working with vector data What is object oriented programming? Analogy to way we interact with objects in real world A component-oriented approach Promotes reusability OOP: encapsulation and data abstraction Two of the fundamental pillars of OOP Data and functions (methods) go together Unimportant details of code are hidden OOP in Python Constructors Class attributes Instance attributes Calling class methods Magic methods Class activity: make your own class! Teams of 2, pick a marker Write code on a board that includes: A class with a constructor One or more method functions Make sure to have some class attributes that serve a purpose Also have instance attributes Create several instances of the class and call its methods to demonstrate Class activity: now make it on Repl.it No teamwork; create a file with your name and put your class in your own fork following the template below: Inheritance and Polymorphism The last two fundamental pillars of OOP Inheritance: subclasses inherit methods and attributes Polymorphism: all subclasses can be used interchangably, regardless of implementation details Class activity: inherit! Follow instructions by forking it. Class activity: polymorphism Teams of 2, pick a marker Write code on a board that includes: A parent class and 2-3 child classes Create parent class method to be overloaded in the children Implement different versions of method in child classes Demonstrate calling the method in children object instances to show different outcomes Must have a meaning! ","date":-62135596800,"description":"","objectID":"a0ced4e712d9229a2b61d92ae111d423","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-object-oriented/","title":"Object Oriented Programming"},{"content":"Python basics refresher ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Introduction, Next - Data structures and performance A crash course into Python (from Ch 2 of \u0026amp;ldquo;Data Science from Scratch\u0026amp;rdquo; by Joel Grus)\nZen of Python Installing Virtual environments Whitespace Modules and import Functions Practice functions Click here to join, or if too slow, fork it from below\nLanguage basics Strings Exceptions Lists Tuples Dictionaries (default, Counter) Practice basics Fork it this time, work in teams\nMisc Python Oddities Sets Control flow Truthiness Sorting List comprehensions Zip and argument unpacking Type annotations Practice Misc Python Stuff Fork it, work in teams\n","date":-62135596800,"description":"","objectID":"a5e72d15968c716c0792abbc65428b3a","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-python-basics/","title":"Python basics refresher"},{"content":" Recursion ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Errors and Exceptions, Next - Object Oriented Programming (click to read more) What is recursion Reusing a function Calling itself Similar to a loop But not linear, instead it could be exponential Why recursion What is the advantage over loops?\nDivide-and-conquer type problems Tree search Sorting Elegant solution Limitations?\nLess efficient Can exhaust program stack Designing a recursive algorithm Do you have a nesting doll situation? Identify the part in your problem that repeats and when that happens. Identify when the recursion ends. What is the condition that stops it? Example: Factorial $$f(n)=n!$$ $$f(n)=n\\times{}(n-1)\\times\\cdots\\times{}2\\times{}1$$\nWhat is the repeating part versus the termination condition?\nRepeating pattern: each time multiply with one less number $$f(n)=n\\times f(n-1)$$ Termination condition: we stop at 1 $$f(1)=1$$ Classic example: factorial For demo purposes only, actual activity on trees.\nTrees A binary tree:\na b c Always true in sorted binary trees: $a\u0026amp;lt;b\u0026amp;lt;c$\nNot a linear data structure, b is root node, b.left=a and b.right=c\nTraversing trees without recursion Write a non-recursive program to count all the nodes in tree:\n2 3 4 6 8 7 Start with root node object (root.val=4), and you can go root.left or root.right to get to the next node. If there is no node, it will be an empty object (None).\nDoes it work for any tree?\nWith recursion 2 3 4 6 8 7 def node_count(node, count): if node.left: count = node_count(node.left, count + 1) if node.right: count = node_count(node.right, count + 1) return count print(node_count(root, 1)) Does it work for any tree?\nClass activity: Solve ONE of these problems Inorder Traversal (HackerRank) Preorder Traversal (HackerRank) Postorder Traversal (HackerRank) Advanced:\nHeight of binary tree (HackerRank) Binary search tree insertion Post your solution link on Piazza.\n(click to read more) ","date":-62135596800,"description":"","objectID":"6dabfd26e80dbc9bfd094c68bedc05f1","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-recursion/","title":"Recursion"},{"content":"Working with vector data ITEC 4400/2160 Python Programming for Data Analysis, Cengiz Günay (License: CC BY-SA 4.0)\nPrev - Object Oriented Programming, Next - Data input/output and cleaning Python\u0026amp;rsquo;s Numpy module From Python for Data Analysis, 2nd Ed, chapter 4:\nenables working with $n$-dimensional arrays math functions without needing to loop over arrays reading/writing to files advanced math: linear algebra, random numbers, etc Numpy overview Creating and manipulating ndarray objects and doing math on them Data types for efficient storage and use Indexing and slicing; with boolean expressions and fancy indexing Unary and binary math functions Numpy practice Work in groups Create numpy arrays in 1D, 2D, and 3D Index slices in 1D, 2D, and 3D Do some arithmetic Use Boolean indexing Have a meaning? Fork this to submit Linear algebra basics: Vectors and matrices Basics: Vectors Vectors: $\\vec{x} = [ 1, 2, 3 ]$\nWhy? Most data comes in vectors Can do bulk operations using math magic:\nAdding or subtracting a scalar: $$ \\vec{x} + 1 = [ 2, 3, 4 ] $$ Multiplying or dividing by a scalar: $$ \\vec{x} \\times 2 = [ 2, 4, 6 ] $$ Adding two vectors (of same size): $$ \\vec{x} + \\vec{x} = [ 2, 4, 6 ] $$ Vector math inner/dot product : $$ \\vec{x} \\cdot \\vec{y} = \\sum x_i y_i $$\nCalculates \u0026amp;ldquo;length of projection\u0026amp;rdquo; Multiply corresponding elements and sum to result in scalar Useful in calculating weighted sums, scaling data elements, etc. outer product : $$ \\vec{x} \\times \\vec{y} = [x_i y_j]_{ij} $$\nelement-by-element multiplication, results in $ n \\times m $ size matrix useful when duplicating rows or columns, or scaling them Basics: Matrices $$ A=\\left[ \\begin{array}{ccc} a_{11} \u0026amp;amp; \\cdots \u0026amp;amp; a_{1n} \\newline \\vdots \u0026amp;amp; \\ddots \u0026amp;amp; \\vdots \\newline a_{m1} \u0026amp;amp; \\cdots \u0026amp;amp; a_{mn} \\newline \\end{array} \\right] $$\nUses:\nAggregation of many vectors Bases for transformation spaces Image data and manipulation Matrix multiplication Must have matching inner dimensions, …","date":-62135596800,"description":"","objectID":"b025890888f63e4308145cbbc5a30a4f","permalink":"https://cengique.github.io/lectures-prog-data-analysis/chapter-vectors/","title":"Working with vector data"},{"content":"Select a chapter from the menu.\n","date":1603121175,"description":"Instructor Materials. Email authors for hidden materials like quizzes and their keys.","lastmod":"2020-12-20T15:26:15Z","objectID":"9e6a1416d4bf7d2fcfc2765ce90e972f","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/","publishdate":"2019-11-23T15:26:15Z","title":"Instructor Materials"},{"content":"This section includes all the small assignments for the course.\nTBA\n","date":1603121175,"description":"Assignments","lastmod":"2020-12-20T15:26:15Z","objectID":"a94b5e3a08c53965757cf6617c2bd9f4","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/assignments/","publishdate":"2019-11-23T15:26:15Z","title":"Assignments"},{"content":"TBA\n","date":1603121175,"description":"Exams","lastmod":"2020-12-20T15:26:15Z","objectID":"326e4c3e83433151edcdc7fadb35e00d","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/exams/","publishdate":"2019-11-23T15:26:15Z","title":"Exams"},{"content":" Week#DateModuleSetupTopicHands-onAssignment ","date":1611588375,"description":"Schedule","lastmod":"2021-01-25T15:26:15Z","objectID":"450c1bfd912a1a4193a1e9d8eba5932a","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/schedule/","publishdate":"2020-12-20T15:26:15Z","title":"Schedule with setup"},{"content":"Syllabus Example Syllabus which includes learning outcomes, textbook, schedule and details about the course organization.\nParts that instructor needs to change to his/her own data are emphasized in yellow.\n","date":1603121175,"description":"Syllabus","lastmod":"2020-12-20T15:26:15Z","objectID":"2dbf0565756b6df943a700c93c819e80","permalink":"https://cengique.github.io/lectures-prog-data-analysis/instructor/syllabus/","publishdate":"2019-11-23T15:26:15Z","title":"Syllabus"},{"content":" Week#DateModuleTopicHands-onAssignment ","date":1611588375,"description":"Schedule","lastmod":"2021-01-25T15:26:15Z","objectID":"b551dedd1c4e75ac43bdd549448b7dab","permalink":"https://cengique.github.io/lectures-prog-data-analysis/schedule/","publishdate":"2020-12-20T15:26:15Z","title":"Schedule"}]